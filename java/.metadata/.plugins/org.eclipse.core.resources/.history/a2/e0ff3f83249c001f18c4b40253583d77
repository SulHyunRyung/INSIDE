package gui;

import model.Member;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class FriendFrame extends JFrame {
    private static final long serialVersionUID = 1L;

    private Member currentMember;
    private JTable friendTable; // 친구 목록을 표시할 테이블
    private DefaultTableModel tableModel; // 테이블 모델

    public FriendFrame(Member member) {
        this.currentMember = member;
        setTitle("친구 목록");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        // 메인 패널 설정
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // 친구 목록을 보여줄 테이블
        String[] columnNames = {"친구 이름", "친구 아이디"};
        Object[][] data = {
            {"홍길동", "hong123"},
            {"김철수", "kim123"},
            {"이영희", "lee123"}
        }; // 예시 데이터, 실제로는 DB에서 데이터를 받아와야 함
        
        tableModel = new DefaultTableModel(data, columnNames);
        friendTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(friendTable);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        // 버튼 패널
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout());

        // 친구 추가 버튼
        JButton addFriendButton = new JButton("친구 추가");
        addFriendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String friendName = JOptionPane.showInputDialog(FriendFrame.this, "친구 이름을 입력하세요:");
                if (friendName != null && !friendName.trim().isEmpty()) {
                    addFriend(friendName);
                }
            }
        });

        // 친구 삭제 버튼
        JButton removeFriendButton = new JButton("친구 삭제");
        removeFriendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = friendTable.getSelectedRow();
                if (selectedRow != -1) {
                    String friendName = (String) friendTable.getValueAt(selectedRow, 0);
                    removeFriend(friendName);
                } else {
                    JOptionPane.showMessageDialog(FriendFrame.this, "친구를 선택하세요.");
                }
            }
        });

        buttonPanel.add(addFriendButton);
        buttonPanel.add(removeFriendButton);

        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(mainPanel);
        setVisible(true);
    }

    // 친구 추가 기능
    private void addFriend(String friendName) {
        // 실제로는 DB에 추가하고 갱신된 친구 목록을 테이블에 반영해야 함
        tableModel.addRow(new Object[]{friendName, "new_id"});
    }

    // 친구 삭제 기능
    private void removeFriend(String friendName) {
        // 실제로는 DB에서 친구를 삭제하고 갱신된 목록을 반영해야 함
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getValueAt(i, 0).equals(friendName)) {
                tableModel.removeRow(i);
                break;
            }
        }
    }
}

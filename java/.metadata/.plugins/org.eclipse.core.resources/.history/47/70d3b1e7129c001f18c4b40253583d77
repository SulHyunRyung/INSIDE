package gui;

import model.Member;
import dao.MemberDAOImpl;
import util.DBconn;
import util.PwChk;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class LoginFrame extends JFrame {
    private static final long serialVersionUID = 1L;
    private JTextField userIdField;
    private JPasswordField passwordField;
    
    public LoginFrame() {
        setTitle("로그인");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(3, 2));

        userIdField = new JTextField();
        passwordField = new JPasswordField();

        JButton loginButton = new JButton("로그인");

        add(new JLabel("아이디:"));
        add(userIdField);
        add(new JLabel("비밀번호:"));
        add(passwordField);
        add(loginButton);

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String userId = userIdField.getText().trim();
                String password = new String(passwordField.getPassword()).trim();

                if (userId.isEmpty()) {
                    JOptionPane.showMessageDialog(LoginFrame.this, "아이디를 입력하세요.");
                    userIdField.requestFocus();
                    return;
                }

                if (password.isEmpty()) {
                    JOptionPane.showMessageDialog(LoginFrame.this, "비밀번호를 입력하세요.");
                    passwordField.requestFocus();
                    return;
                }

                Member member = getMember(userId, password);

                if (member != null) {
                    JOptionPane.showMessageDialog(LoginFrame.this, "로그인 성공");
                    // 로그인 후 화면 전환 등의 추가 작업
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(LoginFrame.this, "아이디 또는 비밀번호가 틀렸습니다.");
                    userIdField.requestFocus();
                }
            }
        });

        // ESC 눌러서 창 종료
        this.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    int result = JOptionPane.showConfirmDialog(LoginFrame.this,
                            "로그인 창을 닫으면 입력된 정보는 삭제됩니다. 창을 종료하시겠습니까?", "로그인 취소",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        dispose();
                    }
                }
            }
        });

        // 포커스 설정
        this.setFocusable(true);
        this.requestFocusInWindow();
    }

    private Member getMember(String userId, String password) {
        String sql = "SELECT * FROM MEMBER_LIST WHERE USER_ID = ?";

        try (Connection conn = DBconn.connectDB();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, userId);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    String hashedPassword = rs.getString("USER_PW");

                    // 비밀번호 확인 (PwChk 사용)
                    if (PwChk.checkPassword(password, hashedPassword)) {
                        return new Member(
                            rs.getString("UID"),
                            rs.getString("USER_NAME"),
                            rs.getString("USER_ID"),
                            hashedPassword,
                            rs.getString("USER_EMAIL"),
                            rs.getDate("REG_DATE")
                        );
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
    }
}

package gui;

import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

import model.Member;
import dao.MemberDAOImpl;
import util.UserExists;
import java.awt.*;
import java.awt.event.*;

public class RegFrame extends JFrame {
    private static final long serialVersionUID = 1L;
    private JTextField userNameField;
    private JTextField userIdField;
    private JPasswordField passwordField;
    private JTextField emailField;
    
    // 각 필드 경고 메시지 출력 여부 추적
    private boolean nameWarningShown = false;
    private boolean idWarningShown = false;   
    private boolean passwordWarningShown = false; 
    private boolean emailWarningShown = false;

    public RegFrame() {
        setTitle("회원가입");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(5, 2));

        userNameField = new JTextField();
        userIdField = new JTextField();
        passwordField = new JPasswordField();
        emailField = new JTextField();

        // 각 필드 글자 수 제한
        userNameField.setDocument(new JTextFieldLimit(25));
        userIdField.setDocument(new JTextFieldLimit(20));
        passwordField.setDocument(new JTextFieldLimit(60));
        emailField.setDocument(new JTextFieldLimit(50));

        JButton registerButton = new JButton("회원가입");

        add(new JLabel("이름:"));
        add(userNameField);
        add(new JLabel("아이디:"));
        add(userIdField);
        add(new JLabel("비밀번호:"));
        add(passwordField);
        add(new JLabel("이메일:"));
        add(emailField);
        add(registerButton);

        // 각 필드 ESC 기능 호출
        addKeyListenerToComponent(userNameField);
        addKeyListenerToComponent(userIdField);
        addKeyListenerToComponent(passwordField);
        addKeyListenerToComponent(emailField);

        // 각 필드 ENTER 기능 호출
        addEnterKeyListener(userNameField, registerButton);
        addEnterKeyListener(userIdField, registerButton);
        addEnterKeyListener(passwordField, registerButton);
        addEnterKeyListener(emailField, registerButton);

        // 전체 프레임 ESC 기능 추가
        this.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    int result = JOptionPane.showConfirmDialog(RegFrame.this,
                            "창을 닫으면 입력된 정보는 삭제됩니다. 창을 종료하시겠습니까?", "회원 가입 취소",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        dispose();
                    }
                }
            }
        });

        // 포커스 설정
        this.setFocusable(true);
        this.requestFocusInWindow();

        // 종료 이벤트
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                int result = JOptionPane.showConfirmDialog(RegFrame.this,
                        "창을 닫으면 입력된 정보는 삭제됩니다. 창을 종료하시겠습니까?", "회원 가입 취소",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.YES_OPTION) {
                    dispose(); 
                }
            }
        });

        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // 회원가입 전에 모든 필드의 길이를 체크
                String userName = userNameField.getText().trim();
                String userId = userIdField.getText().trim();
                String password = new String(passwordField.getPassword()).trim();
                String email = emailField.getText().trim();

                if (userName.length() > 25) {
                    JOptionPane.showMessageDialog(RegFrame.this, "이름은 25글자 이하로 입력해주세요.");
                    userNameField.requestFocus();
                    return;
                }
                if (userId.length() > 20) {
                    JOptionPane.showMessageDialog(RegFrame.this, "ID는 영 대·소문자, 숫자 조합으로 20자 이하로 입력해주세요.");
                    userIdField.requestFocus();  
                    return;
                }
                if (password.length() > 60) {
                    JOptionPane.showMessageDialog(RegFrame.this, "비밀번호는 60자 이하로 입력해주세요.");
                    passwordField.requestFocus();  
                    return;
                }
                if (email.length() > 50) {
                    JOptionPane.showMessageDialog(RegFrame.this, "이메일은 50자 이하로 입력해주세요.");
                    emailField.requestFocus(); 
                    return;
                }

                registerMember();
            }
        });

        setVisible(true);  // 화면 표시
    }

    private void registerMember() {
        String userName = userNameField.getText().trim();
        String userId = userIdField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();
        String email = emailField.getText().trim();

        // 빈 필드 체크
        if (userName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "이름을 입력하세요.");
            userNameField.requestFocus();
            return;
        } else if (userId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "아이디를 입력하세요.");
            userIdField.requestFocus();
            return;
        } else if (password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "비밀번호를 입력하세요.");
            passwordField.requestFocus();
            return;
        } else if (email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "이메일을 입력하세요.");
            emailField.requestFocus();
            return;
        }

        // 중복 체크
        UserExists userExists = new UserExists();
        if (userExists.isUserIdExists(userId)) {
            JOptionPane.showMessageDialog(this, "이미 존재하는 아이디입니다.");
            userIdField.requestFocus();
            return;
        }

        if (userExists.isUserEmailExists(email)) {
            JOptionPane.showMessageDialog(this, "이미 존재하는 이메일입니다.");
            emailField.requestFocus();
            return;
        }

        Member newMember = new Member();
        newMember.setUserName(userName);
        newMember.setUserId(userId);
        newMember.setUserPw(password);
        newMember.setUserEmail(email);

        MemberDAOImpl memberDAO = new MemberDAOImpl();
        if (memberDAO.insertMember(newMember)) {
            JOptionPane.showMessageDialog(this, "회원가입에 성공했습니다. 다시 로그인해주세요.");
            dispose();
            JOptionPane.showMessageDialog(this, "회원가입 실패. 다시 시도하세요.");
        }
    }

    // 각 필드에 Enter 기능 추가
    private void addEnterKeyListener(JTextField textField, JButton button) {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    button.doClick();
                }
            }
        });
    }

    // 각 필드에 ESC 기능 추가
    private void addKeyListenerToComponent(JComponent component) {
        component.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    int result = JOptionPane.showConfirmDialog(RegFrame.this,
                            "창을 닫으면 입력된 정보는 삭제됩니다. 창을 종료하시겠습니까?", "회원 가입 취소",
                            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (result == JOptionPane.YES_OPTION) {
                        dispose();
                    }
                }
            }
        });
    }

    // 각 필드에 최대 길이 제한
    class JTextFieldLimit extends PlainDocument {
		private static final long serialVersionUID = 1L;
		private int limit;

        public JTextFieldLimit(int limit) {
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }
            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
}

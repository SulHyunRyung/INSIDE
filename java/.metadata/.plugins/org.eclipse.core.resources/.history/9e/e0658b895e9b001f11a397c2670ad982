package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Comment;
import util.DBconn;
import util.OracleQuery;

public class CommentDAOImpl implements CommentDAO {

	@Override
	public boolean writeComment(Comment comment) {
	    String sqlInsert = "INSERT INTO " + OracleQuery.COMMENT_TABLE + " (" +
	            OracleQuery.COL_COMMENT_ID + ", " +
	            OracleQuery.COL_C_POST_ID + ", " +
	            OracleQuery.COL_C_USER_ID + ", " +
	            OracleQuery.COL_COMMNET + ", " +
	            OracleQuery.COL_WRITE_DATE + ") " +
	            "VALUES ('C' || LPAD(COMMENT_SEQ.NEXTVAL, 6, '0'), ?, ?, ?, SYSDATE)";

	    try (Connection conn = DBconn.connectDB();
	         PreparedStatement pstmt = conn.prepareStatement(sqlInsert)) {
	         
	        conn.setAutoCommit(false);

	        pstmt.setString(1, comment.getcPostId()); // FK POST_LIST POST_ID
	        pstmt.setString(2, comment.getcUserId()); // FK MEMBER_LIST USER_ID
	        pstmt.setString(3, comment.getComment()); 

	        int result = pstmt.executeUpdate();

	        if (result > 0) {
	        	conn.commit(); 
	        	return true;
		    } else {
		        conn.rollback(); 
		        return false; 
		    }
	    } catch (SQLException e) {
	        e.printStackTrace(); 
	        return false; 
	    }
	}

	@Override
	public boolean deleteComment(String commentId) {
	    String sqlDelete = "DELETE FROM " + OracleQuery.COMMENT_TABLE + " WHERE " + 
	                        OracleQuery.COL_COMMENT_ID + " = ?";

	    try (Connection conn = DBconn.connectDB();
	         PreparedStatement pstmt = conn.prepareStatement(sqlDelete)) {
	        
	        conn.setAutoCommit(false); 
	        pstmt.setString(1, commentId);

	        int result = pstmt.executeUpdate();

	        if (result > 0) {
	            conn.commit();
	            return true;
	        } else {
	            conn.rollback();
	            return false; 
	        }
	    } catch (SQLException e) {
	        e.printStackTrace();
	        return false;
	    }
	}

    @Override
    public List<Comment> viewComment(String postId) {
        List<Comment> comments = new ArrayList<>();
        String sql = "SELECT c_comment_id, c_user_id, c_comment, c_write_date " +
                     "FROM comments WHERE c_post_id = ?"; // 테이블과 컬럼 이름을 확인해야 함

        try (Connection conn = DBconn.connectDB();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, postId); // postId 파라미터 설정

            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Comment comment = new Comment();
                    comment.setCommentId(rs.getString("c_comment_id"));
                    comment.setcUserId(rs.getString("c_user_id"));
                    comment.setComment(rs.getString("c_comment"));
                    comment.setWriteDate(rs.getTimestamp("c_write_date")); // 날짜 처리
                    comments.add(comment);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // 오류 메시지 출력
        }
        return comments;
    }

}
